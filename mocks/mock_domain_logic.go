// Code generated by MockGen. DO NOT EDIT.
// Source: domain/logic/calculate.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockLunchTimeCalculator is a mock of LunchTimeCalculator interface
type MockLunchTimeCalculator struct {
	ctrl     *gomock.Controller
	recorder *MockLunchTimeCalculatorMockRecorder
}

// MockLunchTimeCalculatorMockRecorder is the mock recorder for MockLunchTimeCalculator
type MockLunchTimeCalculatorMockRecorder struct {
	mock *MockLunchTimeCalculator
}

// NewMockLunchTimeCalculator creates a new mock instance
func NewMockLunchTimeCalculator(ctrl *gomock.Controller) *MockLunchTimeCalculator {
	mock := &MockLunchTimeCalculator{ctrl: ctrl}
	mock.recorder = &MockLunchTimeCalculatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLunchTimeCalculator) EXPECT() *MockLunchTimeCalculatorMockRecorder {
	return m.recorder
}

// ObtainMinutesUntilLunchTime mocks base method
func (m *MockLunchTimeCalculator) ObtainMinutesUntilLunchTime() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObtainMinutesUntilLunchTime")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObtainMinutesUntilLunchTime indicates an expected call of ObtainMinutesUntilLunchTime
func (mr *MockLunchTimeCalculatorMockRecorder) ObtainMinutesUntilLunchTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObtainMinutesUntilLunchTime", reflect.TypeOf((*MockLunchTimeCalculator)(nil).ObtainMinutesUntilLunchTime))
}
